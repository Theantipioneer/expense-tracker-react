{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/Transaction.js","components/TransactionList.js","components/IncomeExpense.js","components/AddTransaction.js","App.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","Transaction","sign","className","text","Math","abs","onClick","TransactionList","IncomeExpense","amounts","income","expense","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a4409fa.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Expense Tracker</h1>\r\n        </div>\r\n    )\r\n}\r\n","export default (state, action) => {\r\n    switch(action.type){\r\n        case 'DELETE_TRANSACTION': \r\n            return {\r\n        // argument 1\r\n            ...state,\r\n        // argument 2\r\n            transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n        };\r\n\r\n        case 'ADD_TRANSACTION':\r\n\r\n            return {\r\n                ...state,\r\n        // A reducer returns an object thats why we see an object here. In this case, the new state is a list. \r\n                transactions: [action.payload, ...state.transactions]\r\n        }\r\n    default:\r\n        return state;\r\n    };\r\n}","import {React,  createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\n\r\n// INITIAL STATE\r\nconst initialState = {\r\n    transactions: [\r\n        \r\n    ],\r\n};\r\n\r\n// CREATE CONTEXT\r\nexport const GlobalContext = createContext(initialState)\r\n\r\n// GLOBAL PROVIDER\r\n\r\n// In the provider we need to be able to change state thus we bring in the reducer function. \r\nexport const GlobalProvider = ({children}) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState)\r\n\r\n//ACTIONS\r\n// Actions take in dispatch func that take in an object. \r\n\r\n// Delete transaction action\r\nconst deleteTransaction = (id) => {\r\n    dispatch(\r\n        {\r\n        type: 'DELETE_TRANSACTION', \r\n        payload: id\r\n    }\r\n    );\r\n};\r\n// Add transaction action\r\nconst addTransaction = (transaction) => {\r\n    dispatch(\r\n        {\r\n        type: 'ADD_TRANSACTION', \r\n        payload: transaction\r\n    }\r\n    )\r\n};\r\n\r\n// The value prop takes in an object, hence the double{}.So we want the tranactions object and to access is values we say state.transactions.\r\n    return (\r\n        <GlobalContext.Provider value = {{transactions: state.transactions, deleteTransaction, addTransaction}}>\r\n            {children}\r\n        </ GlobalContext.Provider>\r\n    )\r\n}","import {React, useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nexport const Balance = () => {\r\n\r\n    // At this point we need our money figuers, this means we need to go do the global context and pass through here. \r\n\r\n    const {transactions} =useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map((transaction) => transaction.amount);\r\n\r\n    const total = amounts\r\n            .reduce((acc, item) => (acc += item), 0)\r\n            .toFixed(2)\r\n\r\n    return (\r\n        <div>\r\n            <h2>Your Balance</h2>\r\n            <h1>${total}</h1>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {React, useContext} from 'react';\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nexport const Transaction = ({transaction}) => {\r\n    // Hooks\r\n    const {deleteTransaction} = useContext(GlobalContext);\r\n\r\n    //Functions\r\n    const sign = transaction.amount < 0 ? \"-\" : \"+\";\r\n\r\n    return (\r\n        <li className= {transaction.amount < 0 ? \"minus\" : \"plus\"}>\r\n            {transaction.text}\r\n            <span> \r\n                {sign}${Math.abs(transaction.amount)}\r\n            </span>\r\n            <button className= 'delete-btn' onClick= {() => deleteTransaction(transaction.id)}>\r\n                x\r\n            </button>\r\n        </li>\r\n    );\r\n}\r\n","import {React, useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\nimport {Transaction} from './Transaction'\r\n\r\nexport const TransactionList = () => {\r\n    // Hooks\r\n    const { transactions } = useContext(GlobalContext)\r\n\r\n    // Functions\r\n\r\n    // If we pass in a component to another componenet we need to give a key? It works fine though without a key. ..\r\n\r\n    // The important thing here was to pass transaction as props so we can use it elsewhere to render other properties of transaction such and 'amount and 'text' or even id because thats what each transaction has. \r\n    return (\r\n        <div>\r\n            <h3>History</h3>\r\n            <ul className= 'list'>\r\n                {transactions.map(transaction => (<Transaction transaction={transaction} />))}\r\n            </ul>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import {React, useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nexport const IncomeExpense = () => {\r\n    // HOOKS\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    // FUNCTIONS\r\n    const amounts = transactions.map((transaction) => transaction.amount);\r\n\r\n    const income = amounts\r\n    .filter((item) => item > 0 )\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n    const expense = (amounts\r\n    .filter((item) => item < 0 )\r\n    .reduce((acc, item) => (acc += item),0) * -1)\r\n    .toFixed(2);\r\n\r\n    return (\r\n        <div className= 'inc-exp-container'>\r\n            <div>\r\n                <h4>Income</h4>\r\n                <p className= 'money plus'>{income}</p>\r\n            </div>\r\n            <div>\r\n                <h4>Expense</h4>\r\n                <p className= 'money minus'>{expense}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {React, useContext, useState} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nexport const AddTransaction = () => {\r\n    // Hooks\r\n    // We need component levelstate here because we have input tags that will change as we enter data. \r\n    const [text, setText] = useState(\"\");\r\n    const [amount, setAmount] = useState(0);\r\n    const { addTransaction } = useContext(GlobalContext);\r\n    \r\n\r\n    // Functions\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        // on submit the function must create a new transaction for us, and this is just an object. \r\n        const newTransaction = {\r\n            id:  Math.floor(Math.random() * 100000000),\r\n            text, \r\n            amount: +amount\r\n        };\r\n        // Fires the addTransaction dispatch function. \r\n        addTransaction(newTransaction);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Add New Transaction</h3>\r\n            <form onSubmit= {onSubmit}>\r\n                <div className= \"form-control\">\r\n                    <label htmlFor=\"text\"> Text</label>\r\n                    <input type=\"text\" value={text} onChange={(e) => {setText(e.target.value)}} placeholder= \"Add text../\"/>\r\n                </div>\r\n                <div className= \"form-control\">\r\n                    <label htmlFor=\"amount\"> Amount</label>\r\n                    <input type=\"number\" value={amount} onChange={(e) => {setAmount(e.target.value)}} placeholder= \"Enter amount../\"/>\r\n                </div>\r\n                <div>\r\n                    <button className= \"btn\">Add transaction</button>\r\n                </div>\r\n                \r\n            </form>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport {Header} from './components/Header'\r\nimport {Balance} from './components/Balance'\r\nimport {TransactionList} from './components/TransactionList'\r\nimport {IncomeExpense} from './components/IncomeExpense'\r\nimport {AddTransaction} from './components/AddTransaction'\r\nimport {GlobalProvider} from './context/GlobalState'\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalProvider>\r\n      <Header />\r\n      <div className= 'container'>\r\n        <Balance />\r\n        <IncomeExpense />\r\n        <TransactionList />\r\n        <AddTransaction />\r\n\r\n\r\n      </div>\r\n    </GlobalProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}